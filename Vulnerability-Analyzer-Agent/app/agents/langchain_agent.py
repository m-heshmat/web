from typing import List
from langchain_openai.chat_models import ChatOpenAI
from langchain.output_parsers import PydanticOutputParser
from pydantic import BaseModel


class VulnAgent:
    def __init__(self, api_key:str, model:str, system_prompt:str, pydantic_class:BaseModel,
                 base_url="https://api.groq.com/openai/v1", temperature=0.6, **kwargs):
        
        self.llm = ChatOpenAI(
            model=model,
            base_url=base_url,
            api_key=api_key,
            temperature=temperature,
            **kwargs
        )

        self.system_prompt = system_prompt
        self.pydantic_class = pydantic_class


    def get_vulns_details(self, vulnerabilities_list:List[str], debug=False):

        # Join them with line breaks to make them easier to parse as a block
        formatted_vulns = "\n".join(f"- {v}" for v in vulnerabilities_list)

        output_parser = PydanticOutputParser(pydantic_object=self.pydantic_class)
        schema_parser_instruction = output_parser.get_format_instructions()
        
        # Now build the full prompt by formatting into the refined prompt_template
        message = self.system_prompt + \
                "## Vulnerabilities:\n" + \
                f"{formatted_vulns}\n" + \
                "## Target Pydantic Schema:\n" + \
                f"{schema_parser_instruction}\n" + \
                "## Output (Structured JSON):\n" + \
                "```json"

        if debug: print(message)

        response = self.llm.invoke(message)
        
        return output_parser.parse(str(response.content)), response.content
