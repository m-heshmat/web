import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import ReactMarkdown from 'react-markdown';
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import Sidebar from './Sidebar';
import { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';

const Chat = () => {
  const { conversationId } = useParams();
  const [message, setMessage] = useState('');
  const [conversations, setConversations] = useState([]);
  const [currentConversation, setCurrentConversation] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const messageEndRef = useRef(null);
  const { logout } = useAuth();
  const navigate = useNavigate();
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [messages, setMessages] = useState([]);
  const [streamingResponse, setStreamingResponse] = useState('');
  const messageRefs = useRef([]);

  // Fetch all conversations
  useEffect(() => {
    const fetchConversations = async () => {
      try {
        const response = await axios.get('/conversations');
        setConversations(response.data.conversations || []);
      } catch (error) {
        console.error('Error fetching conversations:', error);
        setError('Failed to load conversations');
      }
    };

    fetchConversations();
  }, []);

  // Fetch specific conversation if conversationId is provided
  useEffect(() => {
    const fetchConversation = async () => {
      if (!conversationId) return;

      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`/conversations/${conversationId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.data && response.data.conversation) {
          // Format the conversation data
          const conv = response.data.conversation;
          
          // Set the messages separately to ensure they're handled properly
          setMessages(conv.messages || []);
          
          // Set the full conversation 
          setCurrentConversation(conv);
          
          // Update this conversation in the conversations list
          setConversations(prevConvs => {
            return prevConvs.map(c => 
              c.id === conv.id ? {
                ...c, 
                title: conv.title,
                updated_at: conv.updated_at,
                message_count: conv.messages ? conv.messages.length : 0
              } : c
            );
          });
        }
      } catch (error) {
        if (error.response && error.response.status === 404) {
          // Do NOT set error here! Only set error if new conversation creation fails
          setTimeout(async () => {
            try {
              const response = await axios.post('/conversations/new', {});
              const newConversation = response.data.conversation;
              setConversations(prev => [newConversation, ...prev]);
              navigate(`/chat/${newConversation.id}`);
            } catch (err) {
              setError('Failed to create a new conversation');
            }
          }, 1500);
        } else {
          setError('Failed to load conversation');
        }
      }
    };

    fetchConversation();
  }, [conversationId, navigate]);

  // Create a new conversation if none exists
  useEffect(() => {
    const createNewConversation = async () => {
      if (!conversationId && conversations.length === 0) {
        try {
          const response = await axios.post('/conversations/new', {});
          const newConversation = response.data.conversation;
          setConversations([newConversation]);
          navigate(`/chat/${newConversation.id}`);
        } catch (error) {
          console.error('Error creating conversation:', error);
          setError('Failed to create a new conversation');
        }
      } else if (!conversationId && conversations.length > 0) {
        // Navigate to most recent conversation if on /chat without ID
        navigate(`/chat/${conversations[0].id}`);
      }
    };

    createNewConversation();
  }, [conversationId, conversations, navigate]);

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [currentConversation?.messages]);

  useEffect(() => {
    scrollToBottom();
  }, [messages, streamingResponse]);

  const scrollToBottom = () => {
    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Scroll to a specific message index if requested
  useEffect(() => {
    if (window.location.hash.startsWith('#msg-')) {
      const idx = parseInt(window.location.hash.replace('#msg-', ''), 10);
      if (!isNaN(idx) && messageRefs.current[idx]) {
        messageRefs.current[idx].scrollIntoView({ behavior: 'smooth', block: 'center' });
        messageRefs.current[idx].classList.add('ring-2', 'ring-yellow-400');
        setTimeout(() => {
          messageRefs.current[idx]?.classList.remove('ring-2', 'ring-yellow-400');
        }, 2000);
      }
    }
  }, [messages]);

  // Streaming send message
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!message.trim() || !conversationId) return;
    setIsLoading(true);
    setError('');
    let reply = '';
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/chat/${conversationId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ message })
      });
      if (!response.body) throw new Error('No response body');
      const reader = response.body.getReader();
      setCurrentConversation((prev) => {
        if (!prev) return prev;
        // Only add a user message and a blank assistant message if the last message isn't already the same
        const lastMsg = prev.messages[prev.messages.length - 1];
        if (!lastMsg || lastMsg.role !== 'user' || lastMsg.content !== message) {
          return { ...prev, messages: [...prev.messages, { role: 'user', content: message }, { role: 'assistant', content: '' }] };
        }
        return prev;
      });
      let isFirstChunk = true;
      let partial = '';
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const chunk = new TextDecoder().decode(value);
        // Filter out any JSON-looking reply (old non-streaming reply)
        if (isFirstChunk && chunk.trim().startsWith('{')) {
          setError('Received a non-streaming JSON reply. Please try again.');
          break;
        }
        isFirstChunk = false;
        partial += chunk;
        reply = partial;
        setCurrentConversation((prev) => {
          if (!prev) return prev;
          const updatedMessages = [...prev.messages];
          // Update the last assistant message
          if (updatedMessages.length && updatedMessages[updatedMessages.length - 1].role === 'assistant') {
            updatedMessages[updatedMessages.length - 1] = { role: 'assistant', content: partial };
          }
          return { ...prev, messages: updatedMessages };
        });
      }
      setMessage('');
      // Optionally, update conversations list (fetch again or update state)
    } catch (error) {
      console.error('Error sending message:', error);
      setError('Failed to send message');
    } finally {
      setIsLoading(false);
    }
  };

  const handleNewChat = async () => {
    try {
      const response = await axios.post('/conversations/new', {});
      const newConversation = response.data.conversation;
      setConversations(prev => [newConversation, ...prev]);
      navigate(`/chat/${newConversation.id}`);
    } catch (error) {
      console.error('Error creating new conversation:', error);
      setError('Failed to create a new conversation');
    }
  };

  const handleDeleteConversation = async (id) => {
    try {
      await axios.delete(`/conversations/${id}`);
      setConversations(prev => prev.filter(conv => conv.id !== id));
      if (id === conversationId) {
        if (conversations.length > 1) {
          // Find the next conversation to navigate to
          const nextConv = conversations.find(conv => conv.id !== id);
          if (nextConv) {
            navigate(`/chat/${nextConv.id}`);
          }
        } else {
          // Create a new conversation if this was the last one
          handleNewChat();
        }
      }
    } catch (error) {
      console.error('Error deleting conversation:', error);
      setError('Failed to delete conversation');
    }
  };

  const handleRenameConversation = async (id, newTitle) => {
  try {
    await axios.put(`/conversations/${id}/rename`, { title: newTitle });
    setConversations(prev =>
      prev.map(conv =>
        conv.id === id ? { ...conv, title: newTitle } : conv
      )
    );
    if (id === conversationId && currentConversation) {
      setCurrentConversation({ ...currentConversation, title: newTitle });
    }
    return {}; // Success: return an empty object or { success: true }
  } catch (error) {
    console.error('Error renaming conversation:', error);
    // Extract error message from backend if available
    let msg = "Failed to rename conversation, a conversation with this name already exists.";
    if (error.response && error.response.data && error.response.data.msg) {
      msg = error.response.data.msg;
    }
    return { error: msg };
  }
};

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  // Function to fetch the latest conversation data
  const fetchConversation = async () => {
    if (!conversationId) return;
    
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`/conversations/${conversationId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data && response.data.conversation) {
        // Format the conversation data
        const conv = response.data.conversation;
        
        // Set the messages separately to ensure they're handled properly
        setMessages(conv.messages || []);
        
        // Set the full conversation 
        setCurrentConversation(conv);
        
        // Update this conversation in the conversations list
        setConversations(prevConvs => {
          return prevConvs.map(c => 
            c.id === conv.id ? {
              ...c, 
              title: conv.title,
              updated_at: conv.updated_at,
              message_count: conv.messages ? conv.messages.length : 0
            } : c
          );
        });
      }
    } catch (error) {
      console.error('Error fetching conversation:', error);
      setError('Failed to load conversation');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!message.trim()) return;

    // Add user message to UI immediately
    const userMessage = { role: 'user', content: message };
    setMessages(prevMessages => [...prevMessages, userMessage]);
    const sentMessage = message.trim();
    setMessage('');
    setIsLoading(true);
    setStreamingResponse('');

    try {
      const token = localStorage.getItem('token');
      // Use streaming response
      const response = await fetch(`/chat/${conversationId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ message: sentMessage })
      });

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
      }

      // Handle streaming response
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        
        const chunk = decoder.decode(value, { stream: true });
        setStreamingResponse(prev => prev + chunk);
      }
      
      // After stream completes, update the messages state with the complete response
      setMessages(prevMessages => {
        // If there's already an assistant response with content, don't add another one
        const lastMessage = prevMessages[prevMessages.length - 1];
        if (lastMessage.role === 'assistant' && lastMessage.content) {
          return prevMessages;
        }
        return [...prevMessages, { role: 'assistant', content: streamingResponse }];
      });

      // Refresh the conversation to ensure we have the latest messages
      fetchConversation();
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prevMessages => [...prevMessages, { 
        role: 'assistant', 
        content: 'Sorry, there was an error processing your request.' 
      }]);
    } finally {
      setStreamingResponse('');
      setIsLoading(false);
    }
  };

  // Custom renderer for code blocks in markdown
  const components = {
    code({ node, inline, className, children, ...props }) {
      const match = /language-(\w+)/.exec(className || '');
      return !inline && match ? (
        <SyntaxHighlighter
          style={docco}
          language={match[1]}
          PreTag="div"
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      ) : (
        <code className={className} {...props}>
          {children}
        </code>
      );
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar for conversations list */}
      <Sidebar
        conversations={conversations}
        currentConversationId={conversationId}
        onNewChat={handleNewChat}
        onDeleteConversation={handleDeleteConversation}
        onRenameConversation={handleRenameConversation}
        onLogout={handleLogout}
        isOpen={isSidebarOpen}
        onToggle={() => setIsSidebarOpen(!isSidebarOpen)}
      />

      {/* Main chat area */}
      <div className="flex-1 flex flex-col">
        {/* Chat header */}
        <header className="bg-white shadow z-10">
          <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <div className="flex items-center">
              <button
                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                className="mr-4 text-gray-500 lg:hidden"
              >
                ☰
              </button>
              <h1 className="text-xl font-bold text-gray-900 truncate max-w-xs">
                {currentConversation?.title || 'New Conversation'}
              </h1>
            </div>
            <div>
              <button
                onClick={handleNewChat}
                className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
              >
                New Chat
              </button>
            </div>
          </div>
        </header>

        {/* Chat messages */}
        <div className="flex-1 overflow-auto p-4 bg-white">
          {/* Only show error if it's NOT a rename error (e.g., sending message, loading, etc.) */}
          {error && !error.includes('rename conversation') && (
            <div className="p-4 bg-red-50 text-red-500 rounded-md mb-4">
              {error}
            </div>
          )}

          <div className="space-y-6">
            {messages.map((msg, index) => (
              <div
                key={index}
                ref={el => messageRefs.current[index] = el}
                className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                id={`msg-${index}`}
              >
                <div
                  className={`max-w-3xl rounded-lg px-4 py-2 ${msg.role === 'user' ? 'bg-primary-600 text-white' : 'bg-gray-100 text-gray-800'}`}
                >
                  <ReactMarkdown components={components}>
                    {msg.content}
                  </ReactMarkdown>
                </div>
              </div>
            ))}
            
            {/* Streaming response */}
            {streamingResponse && (
              <div className="flex justify-start">
                <div className="max-w-3/4 p-3 rounded-lg bg-gray-200 text-gray-800">
                  <ReactMarkdown components={components}>
                    {streamingResponse}
                  </ReactMarkdown>
                </div>
              </div>
            )}
            
            {isLoading && !streamingResponse && (
              <div className="flex justify-start">
                <div className="max-w-3/4 p-3 rounded-lg bg-gray-200 text-gray-800">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messageEndRef} />
          </div>
        </div>

        {/* Message input */}
        <div className="bg-white border-t border-gray-200 p-4">
          <form onSubmit={handleSubmit} className="flex items-center">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              disabled={isLoading}
              placeholder="Ask a cybersecurity question..."
              className="flex-1 rounded-l-md border border-gray-300 py-2 px-4 focus:ring-primary-500 focus:border-primary-500"
            />
            <button
              type="submit"
              disabled={isLoading || !message.trim()}
              className={`rounded-r-md border border-l-0 border-gray-300 py-2 px-4 ${
                isLoading || !message.trim()
                  ? 'bg-gray-300 text-gray-500'
                  : 'bg-primary-600 text-white hover:bg-primary-700'
              }`}
            >
              {isLoading ? 'Sending...' : 'Send'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Chat; 