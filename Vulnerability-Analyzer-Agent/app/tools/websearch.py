from langchain_community.utilities.google_search import GoogleSearchAPIWrapper
import os

def search_results_for_vuln(query: str, max_results=1):
    """
    Search for information related to a vulnerability with robust error handling.
    Always returns a list (empty if no results or error occurs).
    """
    # Always initialize formatted as an empty list
    formatted = []
    
    try:
        # Get API keys from environment to ensure they're available
        google_api_key = os.getenv("GOOGLE_API_KEY")
        google_cse_id = os.getenv("GOOGLE_CSE_ID")
        
        if not google_api_key or not google_cse_id:
            print(f"Missing API keys. GOOGLE_API_KEY: {bool(google_api_key)}, GOOGLE_CSE_ID: {bool(google_cse_id)}")
            # Return empty results if keys are missing
            return []
        
        # Initialize the search wrapper with explicit credentials
        search = GoogleSearchAPIWrapper(
            google_api_key=google_api_key,
            google_cse_id=google_cse_id
        )
        
        # Perform the search with error handling
        try:
            raw_results = search.results(query, num_results=max_results)
            
            # Check if results are None or empty
            if raw_results is None:
                print(f"Google search returned None for query: {query}")
                return []
                
            print(f"Got {len(raw_results)} results for '{query}'")
            
            # Process results only if they exist
            for result in raw_results:
                # Extract link and snippet with defaults
                link = result.get("link", "")
                snippet = result.get("snippet", "")
                
                # Only add if we have valid data
                if link or snippet:
                    formatted.append({
                        "link": link,
                        "snippet": snippet    
                    })
        except Exception as inner_e:
            print(f"Error during Google search execution: {str(inner_e)}")
            # Return empty list on search execution error
            return []
            
    except Exception as e:
        print(f"Outer search error: {str(e)}")
        # Return empty list on any error
        return []
        
    # Always return the formatted list (may be empty)
    return formatted

def live_web_search(query: str, max_results=20):
    """
    Perform a live web search for the given query and return a list of results.
    Each result contains a 'link' and a 'snippet'.
    This function is designed for chatbot/internet-augmented response use cases.
    """
    try:
        return search_results_for_vuln(query, max_results=max_results)
    except Exception as e:
        print(f"Live web search error: {str(e)}")
        return []